{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"#Elevator\r\n\r\nMinimalistic database engine written in Python and based on levelDB.\r\n\r\nAllows async, multithreaded and/or remote acces to a multidb backend.\r\n\r\nRelying on the zeromq network library and msgpack serialization format, it is made to be portable between languages and platforms.\r\n\r\n##Dependencies\r\n* pyzmq\r\n* leveldb\r\n* snappy\r\n* py-leveldb\r\n* Installation\r\n* pip install fabric\r\n* fab install_dependencies\r\n* python setup.py install\r\n\r\n##Installation\r\n```bash\r\npip install fabric\r\nfab build\r\npython setup.py install\r\n```\r\n\r\n##Usage\r\n\r\n###Server\r\n\r\nWhen elevator is installed, you can then launch the server using the elevator executable. Note that a --daemon option is disposable, and allows you to run elevator server as a daemon, storing it's pid in .pid file in /tmp.\r\n\r\nSee config/elevator.conf for an example of Elevator configuration.\r\n\r\n**Example:**\r\n\r\n```bash\r\nelevator --help\r\nusage: elevator [-h] [--daemon] [--config CONFIG] [--bind BIND] [--port PORT]\r\n                [--db DB]\r\n\r\nElevator command line manager\r\n\r\noptional arguments:\r\n  -h, --help       show this help message and exit\r\n  --daemon\r\n  --config CONFIG\r\n  --bind BIND\r\n  --port PORT\r\n  --db DB\r\n```\r\n\r\n###Client\r\n\r\nIn order to communicate with elevator, a Python client is avalaible. You can use it through the Elevator object, brought by the client module.\r\n\r\nNote that by default, client to 'default' database. As Elevator implements a multi-db system, you can create/list/delete/repair databases. To connect to another database, use the eponyme function .connect()\r\n\r\n**Here is a demo:**\r\n\r\n```python\r\n>>> from elevator.client import Elevator\r\n>>> E = Elevator()  # N.B : connected to 'default'\r\n>>> Ebis = Elevator('testdb')  # You can even construct your client with desired db to connect to\r\n>>> E.connect('testdbbis')  # Or even rebind client to a new database\r\n>>> E.Put('abc', 'cba')\r\n>>> E.Get('abc')\r\n'cba'\r\n>>> E.Delete('abc')\r\n>>> for i in xrange(10):\r\n...     E.Put(str(i), str(i))\r\n>>> E.Range('1', '9')\r\n[['1','1'],\r\n ['2','2'],\r\n ['3', '3'],\r\n ['4', '4'],\r\n ['5', '5'],\r\n ['6', '6'],\r\n ['7', '7'],\r\n ['8', '8'],\r\n ['9', '9'],\r\n]\r\n>>> E.Range('1', 2)\r\n[['1', '1'],\r\n ['2', '2'],\r\n]\r\n```\r\n\r\nBatches are implemented too. They're very handy and very fast when it comes to write a lot of datas to the database. See LevelDB documentation for more informations. Use it through the WriteBatch client module class. It has three base methods modeled on LevelDB's Put, Delete, Write.\r\n\r\n**Example:**\r\n\r\n```python\r\n>>> from elevator.client import WriteBatch, Elevator\r\n>>> batch = WriteBatch()  # N.B : port, host, and timeout options are available here\r\n>>> batch.Put('a', 'a')\r\n>>> batch.Put('b', 'b')\r\n>>> batch.Put('c', 'c')\r\n>>> batch.Delete('c')\r\n>>> batch.Write()\r\n>>> E = Elevator()\r\n>>> E.Get('a')\r\n'a'\r\n>>> E.Get('b')\r\n'b'\r\n>>> E.Get('c')\r\nKeyError: \"Key not found\"\r\n```\r\n\r\n###Thanks\r\nThanks to srinikom for its leveldb-server which was a very good base to start from. Thanks to Google, for its amazing database. Thanks to ZeroMQ team, you changed my life!","name":"Elevator","tagline":"Minimalistic database engine based on levelDB as a backend, and protocol buffer as a message protocol.","google":""}